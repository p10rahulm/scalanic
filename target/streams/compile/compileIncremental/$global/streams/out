[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(E:\Learn\Scala\src\main\scala\scriptFile.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(E:\Learn\Scala\src\main\scala\sortlist.scala, E:\Learn\Scala\src\main\scala\Huffman.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(E:\Learn\Scala\src\main\scala\Nat.scala, E:\Learn\Scala\src\main\scala\ConsList.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(E:\Learn\Scala\target\scala-2.12\classes\GoogleVsApple$.class, E:\Learn\Scala\target\scala-2.12\classes\Nil$.class, E:\Learn\Scala\target\scala-2.12\classes\Tweet.class, E:\Learn\Scala\target\scala-2.12\classes\Zero.class, E:\Learn\Scala\target\scala-2.12\classes\Main.class, E:\Learn\Scala\target\scala-2.12\classes\GoogleVsApple.class, E:\Learn\Scala\target\scala-2.12\classes\Main$.class, E:\Learn\Scala\target\scala-2.12\classes\ConsList.class, E:\Learn\Scala\target\scala-2.12\classes\ConsList$.class, E:\Learn\Scala\target\scala-2.12\classes\Nil.class, E:\Learn\Scala\target\scala-2.12\classes\NonEmpty.class, E:\Learn\Scala\target\scala-2.12\classes\ConsList$List.class, E:\Learn\Scala\target\scala-2.12\classes\TweetList.class, E:\Learn\Scala\target\scala-2.12\classes\TweetSet.class, E:\Learn\Scala\target\scala-2.12\classes\Empty.class, E:\Learn\Scala\target\scala-2.12\classes\ConsList$nil.class, E:\Learn\Scala\target\scala-2.12\classes\Cons.class, E:\Learn\Scala\target\scala-2.12\classes\Zero$.class, E:\Learn\Scala\target\scala-2.12\classes\Succ.class, E:\Learn\Scala\target\scala-2.12\classes\ConsList$cons.class, E:\Learn\Scala\target\scala-2.12\classes\Main$delayedInit$body.class, E:\Learn\Scala\target\scala-2.12\classes\Nat.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(Nat, Succ, ConsList.nil, Zero, ConsList.cons, ConsList, ConsList.List)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(E:\Learn\Scala\src\main\scala\Nat.scala, E:\Learn\Scala\src\main\scala\tweetSet.scala, E:\Learn\Scala\src\main\scala\ConsList.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(Nat, Succ, ConsList.nil, Zero, ConsList.cons, ConsList, ConsList.List)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(E:\Learn\Scala\src\main\scala\sortlist.scala, E:\Learn\Scala\src\main\scala\Nat.scala, E:\Learn\Scala\src\main\scala\Huffman.scala, E:\Learn\Scala\src\main\scala\tweetSet.scala, E:\Learn\Scala\src\main\scala\ConsList.scala)[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 5 Scala sources to E:\Learn\Scala\target\scala-2.12\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.2.5:compile for Scala 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler 12287d4f for Scala compiler version 2.12.8[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Users\rmaddy\.ivy2\cache\org.scala-lang\scala-library\jars\scala-library-2.12.8.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	E:\Learn\Scala\target\scala-2.12\classes;C:\Users\rmaddy\.ivy2\cache\org.scala-lang.modules\scala-parser-combinators_2.12\bundles\scala-parser-combinators_2.12-1.0.4.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 4.600950076 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ConsList.cons...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(ConsList.cons)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ConsList.cons)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ConsList.cons,ModifiedNames(changes = UsedName(##,[Default]), UsedName(ConsList;cons;init;,[Default]), UsedName(notify,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName(cons,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The ConsList.cons has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(ConsList;cons;init;,[Default]), UsedName(notify,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName(cons,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ConsList.cons)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from patmat.Huffman...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(patmat.Huffman)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(patmat.Huffman)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(patmat.Huffman,ModifiedNames(changes = UsedName(##,[Default]), UsedName(convert,[Default]), UsedName(decode,[Default]), UsedName(mergeCodeTables,[Default]), UsedName(secret,[Default]), UsedName(Bit,[Default]), UsedName(Leaf,[Default]), UsedName(notify,[Default]), UsedName(weight,[Default]), UsedName(comb_helper,[Default]), UsedName(CodeTree,[Default]), UsedName(quickEncode,[Default]), UsedName(lookup,[Default]), UsedName(until,[Default]), UsedName(times,[Default]), UsedName(Fork,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(combine,[Default]), UsedName(frenchCode,[Default]), UsedName(makeCodeTree,[Default]), UsedName(clone,[Default]), UsedName(Code,[Default]), UsedName(createCodeTree,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(chars,[Default]), UsedName(asInstanceOf,[Default]), UsedName(makeOrderedLeafList,[Default]), UsedName(encode,[Default]), UsedName(addbit_to_charcode,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(Huffman,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(CodeTable,[Default]), UsedName(decodedSecret,[Default]), UsedName(isInstanceOf,[Default]), UsedName(string2Chars,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(codeBits,[Default]), UsedName($isInstanceOf,[Default]), UsedName(singleton,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The patmat.Huffman has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(convert,[Default]), UsedName(decode,[Default]), UsedName(mergeCodeTables,[Default]), UsedName(secret,[Default]), UsedName(Bit,[Default]), UsedName(Leaf,[Default]), UsedName(notify,[Default]), UsedName(weight,[Default]), UsedName(comb_helper,[Default]), UsedName(CodeTree,[Default]), UsedName(quickEncode,[Default]), UsedName(lookup,[Default]), UsedName(until,[Default]), UsedName(times,[Default]), UsedName(Fork,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(combine,[Default]), UsedName(frenchCode,[Default]), UsedName(makeCodeTree,[Default]), UsedName(clone,[Default]), UsedName(Code,[Default]), UsedName(createCodeTree,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(chars,[Default]), UsedName(asInstanceOf,[Default]), UsedName(makeOrderedLeafList,[Default]), UsedName(encode,[Default]), UsedName(addbit_to_charcode,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(Huffman,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(CodeTable,[Default]), UsedName(decodedSecret,[Default]), UsedName(isInstanceOf,[Default]), UsedName(string2Chars,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(codeBits,[Default]), UsedName($isInstanceOf,[Default]), UsedName(singleton,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(patmat.Huffman)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from patmat.Huffman.Leaf...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(patmat.Huffman.Leaf)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(patmat.Huffman.Leaf)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(patmat.Huffman.Leaf,ModifiedNames(changes = UsedName(##,[Default]), UsedName(curried,[Default]), UsedName(char,[Default]), UsedName(Leaf,[Default]), UsedName(notify,[Default]), UsedName(weight,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(productArity,[Default]), UsedName(productElement,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName(synchronized,[Default]), UsedName(patmat;Huffman;Leaf;init;,[Default]), UsedName(productIterator,[Default]), UsedName($init$,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(copy$default$2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The patmat.Huffman.Leaf has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(curried,[Default]), UsedName(char,[Default]), UsedName(Leaf,[Default]), UsedName(notify,[Default]), UsedName(weight,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(productArity,[Default]), UsedName(productElement,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName(synchronized,[Default]), UsedName(patmat;Huffman;Leaf;init;,[Default]), UsedName(productIterator,[Default]), UsedName($init$,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(copy$default$2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(patmat.Huffman.Leaf)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from patmat.Huffman.CodeTree...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(patmat.Huffman.CodeTree)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding patmat.Huffman.Leaf by patmat.Huffman.CodeTree[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding patmat.Huffman.Fork by patmat.Huffman.CodeTree[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(patmat.Huffman.Leaf, patmat.Huffman.Fork, patmat.Huffman.CodeTree)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(patmat.Huffman.CodeTree,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(CodeTree,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(patmat;Huffman;CodeTree;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 3 classes due to The patmat.Huffman.CodeTree has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(CodeTree,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(patmat;Huffman;CodeTree;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(patmat.Huffman.Leaf, patmat.Huffman.Fork, patmat.Huffman.CodeTree)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ConsList.List...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(ConsList.List)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ConsList.List)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ConsList.List,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(List,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The ConsList.List has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(List,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ConsList.List)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ConsList.nil...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(ConsList.nil)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ConsList.nil)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ConsList.nil,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(ConsList;nil;init;,[Default]), UsedName(nil,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The ConsList.nil has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(ConsList;nil;init;,[Default]), UsedName(nil,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ConsList.nil)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from mynil...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(mynil)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(mynil)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(mynil,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(mynil,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(mynil;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The mynil has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(mynil,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(mynil;init;,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(mynil)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from mycons...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(mycons)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(mycons)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(mycons,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(mycons,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(mycons;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The mycons has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(mycons,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(mycons;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(mycons)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from ConsList...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(ConsList)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(ConsList)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(ConsList,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(List,[Default]), UsedName(nil,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(nth,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ConsList,[Default]), UsedName(singleton,[Default]), UsedName(cons,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The ConsList has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(List,[Default]), UsedName(nil,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(nth,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(ConsList,[Default]), UsedName(singleton,[Default]), UsedName(cons,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(ConsList)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from sortlist...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(sortlist)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(sortlist)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(sortlist,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(sortlist,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(insert,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(isort,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The sortlist has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(sortlist,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(insert,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(isort,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(sortlist)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from MyListOperations...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(MyListOperations)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(MyListOperations)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(MyListOperations,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(MyListOperations,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(nth,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(singleton,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The MyListOperations has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(MyListOperations,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(nth,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName($isInstanceOf,[Default]), UsedName(singleton,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(MyListOperations)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from MyList...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(MyList)[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding mynil by MyList[0m
[0m[[0m[0mdebug[0m] [0m[0mIncluding mycons by MyList[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(MyList, mynil, mycons)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(MyList,ModifiedNames(changes = UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MyList,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]))) invalidates 3 classes due to The MyList has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(notify,[Default]), UsedName(isEmpty,[Default]), UsedName(head,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(asInstanceOf,[Default]), UsedName(MyList,[Default]), UsedName(notifyAll,[Default]), UsedName(wait,[Default]), UsedName(ne,[Default]), UsedName(synchronized,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(tail,[Default]), UsedName($isInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(MyList, mynil, mycons)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from patmat.Huffman.Fork...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(patmat.Huffman.Fork)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(patmat.Huffman.Fork)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(patmat.Huffman.Fork,ModifiedNames(changes = UsedName(##,[Default]), UsedName(curried,[Default]), UsedName(notify,[Default]), UsedName(weight,[Default]), UsedName(Fork,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(copy$default$4,[Default]), UsedName(productArity,[Default]), UsedName(productElement,[Default]), UsedName(copy$default$3,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(chars,[Default]), UsedName(asInstanceOf,[Default]), UsedName(patmat;Huffman;Fork;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName(synchronized,[Default]), UsedName(productIterator,[Default]), UsedName(right,[Default]), UsedName($init$,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(copy$default$2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(left,[Default]), UsedName(finalize,[Default]))) invalidates 1 classes due to The patmat.Huffman.Fork has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(##,[Default]), UsedName(curried,[Default]), UsedName(notify,[Default]), UsedName(weight,[Default]), UsedName(Fork,[Default]), UsedName(hashCode,[Default]), UsedName(eq,[Default]), UsedName(clone,[Default]), UsedName(copy$default$4,[Default]), UsedName(productArity,[Default]), UsedName(productElement,[Default]), UsedName(copy$default$3,[Default]), UsedName(==,[Default]), UsedName(toString,[Default]), UsedName(chars,[Default]), UsedName(asInstanceOf,[Default]), UsedName(patmat;Huffman;Fork;init;,[Default]), UsedName(notifyAll,[Default]), UsedName(tupled,[Default]), UsedName(wait,[Default]), UsedName(unapply,[Default]), UsedName(ne,[Default]), UsedName(copy$default$1,[Default]), UsedName(synchronized,[Default]), UsedName(productIterator,[Default]), UsedName(right,[Default]), UsedName($init$,[Default]), UsedName(copy,[Default]), UsedName(apply,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productPrefix,[Default]), UsedName(getClass,[Default]), UsedName(equals,[Default]), UsedName(copy$default$2,[Default]), UsedName($isInstanceOf,[Default]), UsedName(canEqual,[Default]), UsedName($asInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(left,[Default]), UsedName(finalize,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(patmat.Huffman.Fork)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
